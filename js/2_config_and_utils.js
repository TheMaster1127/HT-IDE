// --- Storage Helpers ---
const getIdeId = () => new URLSearchParams(window.location.search).get('id') ?? '0';
const lsGet = key => { try { const i = localStorage.getItem(STORAGE_PREFIX + key); return i ? JSON.parse(i) : null; } catch { return null; } };
const lsSet = (key, value) => { try { localStorage.setItem(STORAGE_PREFIX + key, JSON.stringify(value)); } catch (e) { console.error(e); } };
const lsRemove = key => localStorage.removeItem(STORAGE_PREFIX + key);

// --- Configuration ---
const instructionSetKeys = {
    list: 'instruction_sets_list',
    contentPrefix: 'instruction_set_content_',
    activeId: 'active_instruction_set_id',
    legacyKey: `htvm_lang_${getIdeId()}`
};

const syntaxColorConfig = {
    'ace-color-command': { label: 'HTVM Commands', default: '#569cd6' },
    'ace-color-keyword': { label: 'Keywords', default: '#8080e0' },
    'ace-color-functions': { label: 'Functions', default: '#80dfff' },
    'ace-color-buildin-func': { label: 'Built-in Variables (A_...)', default: '#ff80df' },
    'ace-color-comment': { label: 'Comments', default: '#40d080' },
    'ace-color-blocks-import': { label: 'Programming Blocks & Imports', default: '#f51000' },
    'ace-color-static-types': { label: 'Static Types', default: '#569cd6' },
    'ace-color-string': { label: 'Strings', default: '#ffa0a0' },
    'ace-color-operators': { label: 'Operators & Booleans', default: '#00ffff' },
    'ace-color-array-methods': { label: 'Array Methods', default: '#FAB820' },
    'ace-gutter-background': { label: 'Gutter Background', default: '#204020' },
    'ace-gutter-text': { label: 'Gutter Text Color', default: '#cbcdc3' },
    'ace-active-line': { label: 'Active Line Highlight', default: '#103010' },
    'ace-background': { label: 'Editor Background', default: '#050505' },
};

const draftCompletions = {
    javascript: ['const', 'let', 'var', 'function', 'async', 'await', 'return', 'class', 'extends', 'import', 'export', 'default', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'break', 'continue', 'try', 'catch', 'finally', 'throw', 'new', 'this', 'super', 'document', 'window', 'console', 'log', 'alert', 'fetch', 'Promise'],
    python: ['def', 'class', 'import', 'from', 'as', 'if', 'elif', 'else', 'for', 'in', 'while', 'break', 'continue', 'pass', 'try', 'except', 'finally', 'raise', 'with', 'return', 'yield', 'lambda', 'True', 'False', 'None', 'print', 'len', 'range', 'list', 'dict', 'str', 'int', 'float'],
    c_cpp: ['#include', '#define', 'using', 'namespace', 'std', 'int', 'char', 'float', 'double', 'bool', 'void', 'long', 'short', 'unsigned', 'signed', 'class', 'struct', 'public', 'private', 'protected', 'virtual', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'break', 'continue', 'return', 'const', 'static', 'new', 'delete', 'this', 'cout', 'cin', 'endl', 'printf', 'scanf', 'malloc', 'free', 'calloc', 'realloc', 'FILE', 'fopen', 'fclose', 'fprintf', 'fscanf', 'NULL', 'sizeof'],
    golang: ['package', 'import', 'func', 'var', 'const', 'type', 'struct', 'interface', 'map', 'range', 'go', 'chan', 'select', 'for', 'if', 'else', 'switch', 'case', 'default', 'break', 'continue', 'fallthrough', 'return', 'defer', 'make', 'new', 'len', 'cap', 'append', 'copy', 'delete', 'panic', 'recover', 'int', 'string', 'bool', 'float64'],
    lua: ['local', 'function', 'end', 'if', 'then', 'elseif', 'else', 'for', 'in', 'do', 'while', 'repeat', 'until', 'return', 'break', 'and', 'or', 'not', 'true', 'false', 'nil', 'pcall', 'ipairs', 'pairs', 'print', 'require', 'tostring', 'tonumber', 'table'],
    csharp: ['using', 'namespace', 'class', 'struct', 'interface', 'enum', 'public', 'private', 'protected', 'internal', 'static', 'void', 'int', 'string', 'bool', 'double', 'float', 'char', 'var', 'const', 'new', 'if', 'else', 'for', 'foreach', 'in', 'while', 'do', 'switch', 'case', 'break', 'continue', 'return', 'try', 'catch', 'finally', 'throw', 'async', 'await', 'get', 'set', 'Console', 'WriteLine'],
    java: ['package', 'import', 'public', 'private', 'protected', 'static', 'class', 'interface', 'enum', 'extends', 'implements', 'final', 'void', 'int', 'String', 'boolean', 'double', 'char', 'new', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'break', 'continue', 'return', 'try', 'catch', 'finally', 'throw', 'throws', 'super', 'this', 'System', 'out', 'println'],
    kotlin: ['package', 'import', 'fun', 'val', 'var', 'class', 'interface', 'object', 'data', 'enum', 'public', 'private', 'protected', 'internal', 'override', 'open', 'final', 'abstract', 'when', 'if', 'else', 'for', 'in', 'while', 'do', 'break', 'continue', 'return', 'try', 'catch', 'finally', 'throw', 'Int', 'String', 'Boolean', 'Double', 'println'],
    ruby: ['def', 'end', 'class', 'module', 'require', 'include', 'if', 'elsif', 'else', 'unless', 'while', 'until', 'for', 'in', 'do', 'case', 'when', 'break', 'next', 'redo', 'retry', 'return', 'yield', 'true', 'false', 'nil', 'self', 'puts', 'print', 'gets', 'each', 'map', 'collect'],
    nim: ['var', 'let', 'const', 'type', 'proc', 'func', 'method', 'template', 'macro', 'import', 'export', 'from', 'if', 'elif', 'else', 'case', 'of', 'when', 'for', 'in', 'while', 'block', 'return', 'yield', 'discard', 'break', 'continue', 'try', 'except', 'finally', 'raise', 'int', 'string', 'bool', 'float', 'echo'],
    autohotkey: ['MsgBox', 'Send', 'Click', 'Sleep', 'Loop', 'FileRead', 'If', 'Else', 'Gosub', 'Return', 'ExitApp', 'Reload', 'KeyWait', 'GetKeyState', 'SetTimer', 'WinActivate', 'WinWait', 'WinClose', 'ControlSend', 'class', 'extends', 'new', 'static', 'try', 'catch', 'A_Index', 'A_LoopField', 'ErrorLevel', 'true', 'false'],
    swift: ['import', 'let', 'var', 'func', 'class', 'struct', 'enum', 'protocol', 'extension', 'public', 'private', 'fileprivate', 'internal', 'static', 'if', 'else', 'guard', 'for', 'in', 'while', 'repeat', 'switch', 'case', 'default', 'break', 'continue', 'fallthrough', 'return', 'inout', 'throws', 'rethrows', 'try', 'catch', 'do', 'Int', 'String', 'Bool', 'Double', 'print'],
    dart: ['import', 'export', 'part', 'library', 'var', 'final', 'const', 'late', 'void', 'class', 'mixin', 'enum', 'extends', 'implements', 'with', 'if', 'else', 'for', 'in', 'while', 'do', 'switch', 'case', 'break', 'continue', 'return', 'try', 'catch', 'on', 'finally', 'throw', 'async', 'await', 'yield', 'sync', 'Future', 'Stream', 'print'],
    typescript: ['const', 'let', 'var', 'function', 'async', 'await', 'return', 'class', 'extends', 'implements', 'interface', 'type', 'enum', 'public', 'private', 'protected', 'readonly', 'static', 'import', 'export', 'from', 'default', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'break', 'continue', 'try', 'catch', 'finally', 'throw', 'new', 'this', 'super', 'string', 'number', 'boolean', 'any', 'void', 'null', 'undefined'],
    groovy: ['def', 'class', 'interface', 'enum', 'trait', 'import', 'package', 'as', 'in', 'if', 'else', 'for', 'while', 'switch', 'case', 'break', 'continue', 'return', 'try', 'catch', 'finally', 'throw', 'new', 'this', 'super', 'true', 'false', 'null', 'int', 'String', 'boolean', 'println', 'each'],
    html: ['html', 'head', 'body', 'title', 'meta', 'link', 'style', 'script', 'div', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'a', 'img', 'ul', 'ol', 'li', 'form', 'input', 'button', 'textarea', 'label', 'table', 'tr', 'td', 'th', 'thead', 'tbody', 'footer', 'header', 'nav', 'section', 'article', 'aside', 'main', 'iframe', 'class=', 'id=', 'src=', 'href=', 'style=', 'alt=', 'type=', 'placeholder=', 'value=']
};


// --- Utility Functions ---
const debounce = (func, delay) => {
    let timeout;
    return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), delay);
    };
};

function LoopParseFunc(varString, delimiter1="", delimiter2="") {
    let items;
    if (!delimiter1 && !delimiter2) {
        // If no delimiters are provided, return an array of characters
        items = [...varString];
    } else {
        // Construct the regular expression pattern for splitting the string
        let pattern = new RegExp('[' + delimiter1.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + delimiter2.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ']+');
        // Split the string using the constructed pattern
        items = varString.split(pattern);
    }
    return items;
}

function resetGlobalVarsOfHTVMjs(){var str0,str00,str1,str2,str3,str4,str5,str6,str7,str8,str9,str10,str11,str12,str13,str14,str15,str16,str17,str18,str19,str20,str21,int0,int1,int2,int3,int4,int5,int6,int7,argHTVMinstrMORE,isNotHTVMfileEXTRA_INT,isNotHTVMfile2,isNotHTVMfileEXTRA_LIB_INFO,isNotHTVMfileEXTRA_FUNCS_INFO,programmingBlock_InTheTranspiledLang,programmingBlock_CPP,programmingBlock_PY,programmingBlock_JS,programmingBlock_GO,programmingBlock_LUA,programmingBlock_CS,programmingBlock_JAVA,programmingBlock_KT,programmingBlock_RB,programmingBlock_NIM,programmingBlock_AHK,programmingBlock_SWIFT,programmingBlock_DART,programmingBlock_TS,programmingBlock_GROOVY,programmingBlock_HTVM,programmingBlock_HTVMsyntax,fullLangAllOperators,fullLangAllOperators_HELP,fixExpertionLineFuncOnly,langToConvertTo,langFileExtension,commands,keyWordAlliance,keyWordCrew,keyWordProc,keyWordStruct,keyWordPorp,keyWordThis,keyWordInclude,keyWordCodeInTheTranspiledLangStart,keyWordCodeInTheTranspiledLangEnd,keyWordCodeInTheTranspiledLangStartCPP,keyWordCodeInTheTranspiledLangEndCPP,keyWordCodeInTheTranspiledLangStartPY,keyWordCodeInTheTranspiledLangEndPY,keyWordCodeInTheTranspiledLangStartJS,keyWordCodeInTheTranspiledLangEndJS,keyWordCodeInTheTranspiledLangStartGO,keyWordCodeInTheTranspiledLangEndGO,keyWordCodeInTheTranspiledLangStartLUA,keyWordCodeInTheTranspiledLangEndLUA,keyWordCodeInTheTranspiledLangStartCS,keyWordCodeInTheTranspiledLangEndCS,keyWordCodeInTheTranspiledLangStartJAVA,keyWordCodeInTheTranspiledLangEndJAVA,keyWordCodeInTheTranspiledLangStartKT,keyWordCodeInTheTranspiledLangEndKT,keyWordCodeInTheTranspiledLangStartRB,keyWordCodeInTheTranspiledLangEndRB,keyWordCodeInTheTranspiledLangStartNIM,keyWordCodeInTheTranspiledLangEndNIM,keyWordCodeInTheTranspiledLangStartAHK,keyWordCodeInTheTranspiledLangEndAHK,keyWordCodeInTheTranspiledLangStartSWIFT,keyWordCodeInTheTranspiledLangEndSWIFT,keyWordCodeInTheTranspiledLangStartDART,keyWordCodeInTheTranspiledLangEndDART,keyWordCodeInTheTranspiledLangStartTS,keyWordCodeInTheTranspiledLangEndTS,keyWordCodeInTheTranspiledLangStartGROOVY,keyWordCodeInTheTranspiledLangEndGROOVY,keyWordCodeInTheTranspiledLangStartHTVM,keyWordCodeInTheTranspiledLangEndHTVM,keyWordCodeInHTVMstart,keyWordCodeInHTVMend,keyWordCurlyBraceOpen,keyWordCurlyBraceClose,keyWordNull,keyWordTrue,keyWordFalse,keyWordVoid,keyWordDouble,keyWordChar,keyWordUint8,keyWordUint16,keyWordUint32,keyWordUint64,keyWordINT,keyWordSTR,keyWordBOOL,keyWordFLOAT,keyWordINT8,keyWordINT16,keyWordINT32,keyWordINT64,keyWordIF,keyWordElseIf,keyWordElse,keyWordWhileLoop,keyWordLoopInfinite,keyWordLoop,keyWordLoopParse,keyWordContinue,keyWordBreak,keyWordFunc,keyWordAwait,keyWordAsync,keyWordThrow,keyWordErrorMsg,keyWordTry,keyWordCatch,keyWordFinally,keyWordReturnStatement,keyWordArrayAppend,keyWordArrayPop,keyWordArraySize,keyWordArrayInsert,keyWordArrayRemove,keyWordArrayIndexOf,keyWordArrayDefinition,keyWordArrayOfIntegersDefinition,keyWordArrayOfStringsDefinition,keyWordArrayOfFloatingPointNumbersDefinition,keyWordArrayOfBooleansDefinition,keyWordVar,keyWordLet,keyWordConst,keyWordEnd,keyWordGlobal,keyWordComment,keyWordCommentOpenMultiLine,keyWordCommentCloseMultiLine,keyWordEscpaeChar,keyWordMainLabel,keyWordConcat,keyWordAdd,keyWordSub,keyWordMul,keyWordDiv,keyWordMod,keyWordExp,keyWordEqual,keyWordStrictEqual,keyWordNotEqual,keyWordGreater,keyWordLess,keyWordGreaterEqual,keyWordLessEqual,keyWordAnd,keyWordOr,keyWordNot,keyWordBitAnd,keyWordBitOr,keyWordBitXor,keyWordBitNot,keyWordShiftLeft,keyWordShiftRight,keyWordShiftUnsignedRight,keyWordAssign,keyWordAssignAdd,keyWordAssignConcat,keyWordAssignSub,keyWordAssignMul,keyWordAssignDiv,keyWordAssignMod,keyWordAssignShiftLeft,keyWordAssignShiftRight,keyWordLogicalAssignShiftRight,keyWordAssignBitAnd,keyWordAssignBitOr,keyWordAssignBitXor,keyWordTernary1,keyWordTernary2,keyWordInc,keyWordDec,AHKlikeLoopsIndexedAt,keyWordAIndex,keyWordALoopField,useFuncKeyWord,useCurlyBraces,useEnd,useSemicolon,theSemicolon,theColon,useParentheses,usePrefixTypeForTypeDefinition,usePostfixTypeForTypeDefinition,usePythonicColonSyntax,useCurlyBracesSyntaxForArrayDef,useInJavaScriptAlwaysUseVar,useJavaScriptInAfullHTMLfile,useJavaScriptAmainFuncDef,useJavaScriptAllFuncsAreAsync,useJavaScriptAlwaysTripleEqual,keyWordALoopFieldOriginal,keyWordAIndexOriginal,out_KeyWordsCommands,outTrimCode,htCode,outVarOperator,lineDone,areWeInAFuncFromInstructions,areWeInAFuncFromInstructionsLineNum,javaMainFuncSeen,csMainFuncSeen,howMany_fixAindexInGoUnused,luaContinueFix_Num,theTryCatchVarForErrors,allVarsSoWeDontReDecVars,allVarsSoWeDontReDecVars_FIX_uint8,allVarsSoWeDontReDecVars_FIX_uint16,allVarsSoWeDontReDecVars_FIX_uint32,allVarsSoWeDontReDecVars_FIX_uint64,allVarsSoWeDontReDecVars_FIX_int64,allVarsSoWeDontReDecVars_FIX_float,allVarsSoWeDontReDecVars_FIX_TOGGLE;
    str0="nothing";str00="nothing";str1="";str2="";str3="";str4="";str5="";str6="";str7="";str8="";str9="";str10="";str11="";str12="";str13="";str14="";str15="";str16="";str17="";str18="";str19="";str20="";str21="";int0=0;int1=0;int2=0;int3=0;int4=0;int5=0;int6=0;int7=0;argHTVMinstrMORE=[];isNotHTVMfileEXTRA_INT=0;isNotHTVMfile2=0;isNotHTVMfileEXTRA_LIB_INFO="";isNotHTVMfileEXTRA_FUNCS_INFO="";programmingBlock_InTheTranspiledLang=[];programmingBlock_CPP=[];programmingBlock_PY=[];programmingBlock_JS=[];programmingBlock_GO=[];programmingBlock_LUA=[];programmingBlock_CS=[];programmingBlock_JAVA=[];programmingBlock_KT=[];programmingBlock_RB=[];programmingBlock_NIM=[];programmingBlock_AHK=[];programmingBlock_SWIFT=[];programmingBlock_DART=[];programmingBlock_TS=[];programmingBlock_GROOVY=[];programmingBlock_HTVM=[];programmingBlock_HTVMsyntax=[];fullLangAllOperators=[];fullLangAllOperators_HELP=[];fixExpertionLineFuncOnly=0;langToConvertTo="";langFileExtension="";commands="";keyWordAlliance="";keyWordCrew="";keyWordProc="";keyWordStruct="";keyWordPorp="";keyWordThis="";keyWordInclude="";keyWordCodeInTheTranspiledLangStart="";keyWordCodeInTheTranspiledLangEnd="";keyWordCodeInTheTranspiledLangStartCPP="";keyWordCodeInTheTranspiledLangEndCPP="";keyWordCodeInTheTranspiledLangStartPY="";keyWordCodeInTheTranspiledLangEndPY="";keyWordCodeInTheTranspiledLangStartJS="";keyWordCodeInTheTranspiledLangEndJS="";keyWordCodeInTheTranspiledLangStartGO="";keyWordCodeInTheTranspiledLangEndGO="";keyWordCodeInTheTranspiledLangStartLUA="";keyWordCodeInTheTranspiledLangEndLUA="";keyWordCodeInTheTranspiledLangStartCS="";keyWordCodeInTheTranspiledLangEndCS="";keyWordCodeInTheTranspiledLangStartJAVA="";keyWordCodeInTheTranspiledLangEndJAVA="";keyWordCodeInTheTranspiledLangStartKT="";keyWordCodeInTheTranspiledLangEndKT="";keyWordCodeInTheTranspiledLangStartRB="";keyWordCodeInTheTranspiledLangEndRB="";keyWordCodeInTheTranspiledLangStartNIM="";keyWordCodeInTheTranspiledLangEndNIM="";keyWordCodeInTheTranspiledLangStartAHK="";keyWordCodeInTheTranspiledLangEndAHK="";keyWordCodeInTheTranspiledLangStartSWIFT="";keyWordCodeInTheTranspiledLangEndSWIFT="";keyWordCodeInTheTranspiledLangStartDART="";keyWordCodeInTheTranspiledLangEndDART="";keyWordCodeInTheTranspiledLangStartTS="";keyWordCodeInTheTranspiledLangEndTS="";keyWordCodeInTheTranspiledLangStartGROOVY="";keyWordCodeInTheTranspiledLangEndGROOVY="";keyWordCodeInTheTranspiledLangStartHTVM="";keyWordCodeInTheTranspiledLangEndHTVM="";keyWordCodeInHTVMstart="";keyWordCodeInHTVMend="";keyWordCurlyBraceOpen="";keyWordCurlyBraceClose="";keyWordNull="";keyWordTrue="";keyWordFalse="";keyWordVoid="";keyWordDouble="";keyWordChar="";keyWordUint8="";keyWordUint16="";keyWordUint32="";keyWordUint64="";keyWordINT="";keyWordSTR="";keyWordBOOL="";keyWordFLOAT="";keyWordINT8="";keyWordINT16="";keyWordINT32="";keyWordINT64="";keyWordIF="";keyWordElseIf="";keyWordElse="";keyWordWhileLoop="";keyWordLoopInfinite="";keyWordLoop="";keyWordLoopParse="";keyWordContinue="";keyWordBreak="";keyWordFunc="";keyWordAwait="";keyWordAsync="";keyWordThrow="";keyWordErrorMsg="";keyWordTry="";keyWordCatch="";keyWordFinally="";keyWordReturnStatement="";keyWordArrayAppend="";keyWordArrayPop="";keyWordArraySize="";keyWordArrayInsert="";keyWordArrayRemove="";keyWordArrayIndexOf="";keyWordArrayDefinition="";keyWordArrayOfIntegersDefinition="";keyWordArrayOfStringsDefinition="";keyWordArrayOfFloatingPointNumbersDefinition="";keyWordArrayOfBooleansDefinition="";keyWordVar="";keyWordLet="";keyWordConst="";keyWordEnd="";keyWordGlobal="";keyWordComment="";keyWordCommentOpenMultiLine="";keyWordCommentCloseMultiLine="";keyWordEscpaeChar="";keyWordMainLabel="";keyWordConcat="";keyWordAdd="";keyWordSub="";keyWordMul="";keyWordDiv="";keyWordMod="";keyWordExp="";keyWordEqual="";keyWordStrictEqual="";keyWordNotEqual="";keyWordGreater="";keyWordLess="";keyWordGreaterEqual="";keyWordLessEqual="";keyWordAnd="";keyWordOr="";keyWordNot="";keyWordBitAnd="";keyWordBitOr="";keyWordBitXor="";keyWordBitNot="";keyWordShiftLeft="";keyWordShiftRight="";keyWordShiftUnsignedRight="";keyWordAssign="";keyWordAssignAdd="";keyWordAssignConcat="";keyWordAssignSub="";keyWordAssignMul="";keyWordAssignDiv="";keyWordAssignMod="";keyWordAssignShiftLeft="";keyWordAssignShiftRight="";keyWordLogicalAssignShiftRight="";keyWordAssignBitAnd="";keyWordAssignBitOr="";keyWordAssignBitXor="";keyWordTernary1="";keyWordTernary2="";keyWordInc="";keyWordDec="";AHKlikeLoopsIndexedAt="";keyWordAIndex="";keyWordALoopField="";useFuncKeyWord="";useCurlyBraces="";useEnd="";useSemicolon="";theSemicolon="";theColon="";useParentheses="";usePrefixTypeForTypeDefinition="";usePostfixTypeForTypeDefinition="";usePythonicColonSyntax="";useCurlyBracesSyntaxForArrayDef="";useInJavaScriptAlwaysUseVar="";useJavaScriptInAfullHTMLfile="";useJavaScriptAmainFuncDef="";useJavaScriptAllFuncsAreAsync="";useJavaScriptAlwaysTripleEqual="";
    keyWordALoopFieldOriginal = ""; keyWordAIndexOriginal = ""; out_KeyWordsCommands = ""; outTrimCode = ""; htCode = ""; outVarOperator = ""; lineDone = 0; areWeInAFuncFromInstructions = 0; areWeInAFuncFromInstructionsLineNum = 0; javaMainFuncSeen = 0; csMainFuncSeen = 0; howMany_fixAindexInGoUnused = 0; luaContinueFix_Num = 0; theTryCatchVarForErrors = "jhku-dfsds-ds-d-ffdsf-sdfsfdsedsf"; allVarsSoWeDontReDecVars = []; allVarsSoWeDontReDecVars_FIX_uint8 = []; allVarsSoWeDontReDecVars_FIX_uint16 = []; allVarsSoWeDontReDecVars_FIX_uint32 = []; allVarsSoWeDontReDecVars_FIX_uint64 = []; allVarsSoWeDontReDecVars_FIX_int64 = []; allVarsSoWeDontReDecVars_FIX_float = []; allVarsSoWeDontReDecVars_FIX_TOGGLE = 0;
}